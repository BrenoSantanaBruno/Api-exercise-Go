// Code generated by sqlc. DO NOT EDIT.
// source: tb_admin.sql

package db

import (
	"context"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO tb_admin (
   nome, email, endereco, cpf, nivel, telefone
) VALUES (
             $1, $2, $3, $4, $5, $6
         )
RETURNING id, nome, email, endereco, cpf, telefone, nivel, dt_cadastro, modificado_em
`

type CreateAdminParams struct {
	Nome     string `json:"nome"`
	Email    string `json:"email"`
	Endereco string `json:"endereco"`
	Cpf      int32  `json:"cpf"`
	Nivel    int32  `json:"nivel"`
	Telefone int32  `json:"telefone"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (TbAdmin, error) {
	row := q.db.QueryRowContext(ctx, createAdmin,
		arg.Nome,
		arg.Email,
		arg.Endereco,
		arg.Cpf,
		arg.Nivel,
		arg.Telefone,
	)
	var i TbAdmin
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Email,
		&i.Endereco,
		&i.Cpf,
		&i.Telefone,
		&i.Nivel,
		&i.DtCadastro,
		&i.ModificadoEm,
	)
	return i, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM tb_admin
WHERE id = $1
`

func (q *Queries) DeleteAdmin(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAdmin, id)
	return err
}

const getAdmin = `-- name: GetAdmin :one
SELECT id, nome, email, endereco, cpf, telefone, nivel, dt_cadastro, modificado_em FROM tb_admin
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAdmin(ctx context.Context, id int64) (TbAdmin, error) {
	row := q.db.QueryRowContext(ctx, getAdmin, id)
	var i TbAdmin
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Email,
		&i.Endereco,
		&i.Cpf,
		&i.Telefone,
		&i.Nivel,
		&i.DtCadastro,
		&i.ModificadoEm,
	)
	return i, err
}

const listAdmin = `-- name: ListAdmin :many
SELECT id, nome, email, endereco, cpf, telefone, nivel, dt_cadastro, modificado_em FROM tb_admin
ORDER BY id
`

func (q *Queries) ListAdmin(ctx context.Context) ([]TbAdmin, error) {
	rows, err := q.db.QueryContext(ctx, listAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbAdmin
	for rows.Next() {
		var i TbAdmin
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Email,
			&i.Endereco,
			&i.Cpf,
			&i.Telefone,
			&i.Nivel,
			&i.DtCadastro,
			&i.ModificadoEm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountAdmin = `-- name: UpdateAccountAdmin :one
UPDATE tb_admin
SET nome = $2,
    email = $3,
    telefone = $4,
    endereco = $5,
    cpf = $6,
    nivel= $7

WHERE id = $1
RETURNING id, nome, email, endereco, cpf, telefone, nivel, dt_cadastro, modificado_em
`

type UpdateAccountAdminParams struct {
	ID       int64  `json:"id"`
	Nome     string `json:"nome"`
	Email    string `json:"email"`
	Telefone int32  `json:"telefone"`
	Endereco string `json:"endereco"`
	Cpf      int32  `json:"cpf"`
	Nivel    int32  `json:"nivel"`
}

func (q *Queries) UpdateAccountAdmin(ctx context.Context, arg UpdateAccountAdminParams) (TbAdmin, error) {
	row := q.db.QueryRowContext(ctx, updateAccountAdmin,
		arg.ID,
		arg.Nome,
		arg.Email,
		arg.Telefone,
		arg.Endereco,
		arg.Cpf,
		arg.Nivel,
	)
	var i TbAdmin
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Email,
		&i.Endereco,
		&i.Cpf,
		&i.Telefone,
		&i.Nivel,
		&i.DtCadastro,
		&i.ModificadoEm,
	)
	return i, err
}
